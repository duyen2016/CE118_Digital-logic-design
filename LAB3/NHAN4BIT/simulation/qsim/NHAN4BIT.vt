// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/05/2023 10:14:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    NHAN4BIT
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module NHAN4BIT_vlg_sample_tst(
	IN0,
	IN1,
	sampler_tx
);
input [3:0] IN0;
input [3:0] IN1;
output sampler_tx;

reg sample;
time current_time;
always @(IN0 or IN1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module NHAN4BIT_vlg_check_tst (
	F0,
	F1,
	S,
	sampler_rx
);
input [15:0] F0;
input [15:0] F1;
input [15:0] S;
input sampler_rx;

reg [15:0] F0_expected;
reg [15:0] F1_expected;
reg [15:0] S_expected;

reg [15:0] F0_prev;
reg [15:0] F1_prev;
reg [15:0] S_prev;

reg [15:0] F0_expected_prev;
reg [15:0] F1_expected_prev;
reg [15:0] S_expected_prev;

reg [15:0] last_F0_exp;
reg [15:0] last_F1_exp;
reg [15:0] last_S_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	F0_prev = F0;
	F1_prev = F1;
	S_prev = S;
end

// update expected /o prevs

always @(trigger)
begin
	F0_expected_prev = F0_expected;
	F1_expected_prev = F1_expected;
	S_expected_prev = S_expected;
end


// expected S[ 15 ]
initial
begin
	S_expected[15] = 1'bX;
end 
// expected S[ 14 ]
initial
begin
	S_expected[14] = 1'bX;
end 
// expected S[ 13 ]
initial
begin
	S_expected[13] = 1'bX;
end 
// expected S[ 12 ]
initial
begin
	S_expected[12] = 1'bX;
end 
// expected S[ 11 ]
initial
begin
	S_expected[11] = 1'bX;
end 
// expected S[ 10 ]
initial
begin
	S_expected[10] = 1'bX;
end 
// expected S[ 9 ]
initial
begin
	S_expected[9] = 1'bX;
end 
// expected S[ 8 ]
initial
begin
	S_expected[8] = 1'bX;
end 
// expected S[ 7 ]
initial
begin
	S_expected[7] = 1'bX;
end 
// expected S[ 6 ]
initial
begin
	S_expected[6] = 1'bX;
end 
// expected S[ 5 ]
initial
begin
	S_expected[5] = 1'bX;
end 
// expected S[ 4 ]
initial
begin
	S_expected[4] = 1'bX;
end 
// expected S[ 3 ]
initial
begin
	S_expected[3] = 1'bX;
end 
// expected S[ 2 ]
initial
begin
	S_expected[2] = 1'bX;
end 
// expected S[ 1 ]
initial
begin
	S_expected[1] = 1'bX;
end 
// expected S[ 0 ]
initial
begin
	S_expected[0] = 1'bX;
end 
// expected F0[ 15 ]
initial
begin
	F0_expected[15] = 1'bX;
end 
// expected F0[ 14 ]
initial
begin
	F0_expected[14] = 1'bX;
end 
// expected F0[ 13 ]
initial
begin
	F0_expected[13] = 1'bX;
end 
// expected F0[ 12 ]
initial
begin
	F0_expected[12] = 1'bX;
end 
// expected F0[ 11 ]
initial
begin
	F0_expected[11] = 1'bX;
end 
// expected F0[ 10 ]
initial
begin
	F0_expected[10] = 1'bX;
end 
// expected F0[ 9 ]
initial
begin
	F0_expected[9] = 1'bX;
end 
// expected F0[ 8 ]
initial
begin
	F0_expected[8] = 1'bX;
end 
// expected F0[ 7 ]
initial
begin
	F0_expected[7] = 1'bX;
end 
// expected F0[ 6 ]
initial
begin
	F0_expected[6] = 1'bX;
end 
// expected F0[ 5 ]
initial
begin
	F0_expected[5] = 1'bX;
end 
// expected F0[ 4 ]
initial
begin
	F0_expected[4] = 1'bX;
end 
// expected F0[ 3 ]
initial
begin
	F0_expected[3] = 1'bX;
end 
// expected F0[ 2 ]
initial
begin
	F0_expected[2] = 1'bX;
end 
// expected F0[ 1 ]
initial
begin
	F0_expected[1] = 1'bX;
end 
// expected F0[ 0 ]
initial
begin
	F0_expected[0] = 1'bX;
end 
// expected F1[ 15 ]
initial
begin
	F1_expected[15] = 1'bX;
end 
// expected F1[ 14 ]
initial
begin
	F1_expected[14] = 1'bX;
end 
// expected F1[ 13 ]
initial
begin
	F1_expected[13] = 1'bX;
end 
// expected F1[ 12 ]
initial
begin
	F1_expected[12] = 1'bX;
end 
// expected F1[ 11 ]
initial
begin
	F1_expected[11] = 1'bX;
end 
// expected F1[ 10 ]
initial
begin
	F1_expected[10] = 1'bX;
end 
// expected F1[ 9 ]
initial
begin
	F1_expected[9] = 1'bX;
end 
// expected F1[ 8 ]
initial
begin
	F1_expected[8] = 1'bX;
end 
// expected F1[ 7 ]
initial
begin
	F1_expected[7] = 1'bX;
end 
// expected F1[ 6 ]
initial
begin
	F1_expected[6] = 1'bX;
end 
// expected F1[ 5 ]
initial
begin
	F1_expected[5] = 1'bX;
end 
// expected F1[ 4 ]
initial
begin
	F1_expected[4] = 1'bX;
end 
// expected F1[ 3 ]
initial
begin
	F1_expected[3] = 1'bX;
end 
// expected F1[ 2 ]
initial
begin
	F1_expected[2] = 1'bX;
end 
// expected F1[ 1 ]
initial
begin
	F1_expected[1] = 1'bX;
end 
// expected F1[ 0 ]
initial
begin
	F1_expected[0] = 1'bX;
end 
// generate trigger
always @(F0_expected or F0 or F1_expected or F1 or S_expected or S)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected F0 = %b | expected F1 = %b | expected S = %b | ",F0_expected_prev,F1_expected_prev,S_expected_prev);
	$display("| real F0 = %b | real F1 = %b | real S = %b | ",F0_prev,F1_prev,S_prev);
`endif
	if (
		( F0_expected_prev[0] !== 1'bx ) && ( F0_prev[0] !== F0_expected_prev[0] )
		&& ((F0_expected_prev[0] !== last_F0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[0] = F0_expected_prev[0];
	end
	if (
		( F0_expected_prev[1] !== 1'bx ) && ( F0_prev[1] !== F0_expected_prev[1] )
		&& ((F0_expected_prev[1] !== last_F0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[1] = F0_expected_prev[1];
	end
	if (
		( F0_expected_prev[2] !== 1'bx ) && ( F0_prev[2] !== F0_expected_prev[2] )
		&& ((F0_expected_prev[2] !== last_F0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[2] = F0_expected_prev[2];
	end
	if (
		( F0_expected_prev[3] !== 1'bx ) && ( F0_prev[3] !== F0_expected_prev[3] )
		&& ((F0_expected_prev[3] !== last_F0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[3] = F0_expected_prev[3];
	end
	if (
		( F0_expected_prev[4] !== 1'bx ) && ( F0_prev[4] !== F0_expected_prev[4] )
		&& ((F0_expected_prev[4] !== last_F0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[4] = F0_expected_prev[4];
	end
	if (
		( F0_expected_prev[5] !== 1'bx ) && ( F0_prev[5] !== F0_expected_prev[5] )
		&& ((F0_expected_prev[5] !== last_F0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[5] = F0_expected_prev[5];
	end
	if (
		( F0_expected_prev[6] !== 1'bx ) && ( F0_prev[6] !== F0_expected_prev[6] )
		&& ((F0_expected_prev[6] !== last_F0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[6] = F0_expected_prev[6];
	end
	if (
		( F0_expected_prev[7] !== 1'bx ) && ( F0_prev[7] !== F0_expected_prev[7] )
		&& ((F0_expected_prev[7] !== last_F0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[7] = F0_expected_prev[7];
	end
	if (
		( F0_expected_prev[8] !== 1'bx ) && ( F0_prev[8] !== F0_expected_prev[8] )
		&& ((F0_expected_prev[8] !== last_F0_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[8] = F0_expected_prev[8];
	end
	if (
		( F0_expected_prev[9] !== 1'bx ) && ( F0_prev[9] !== F0_expected_prev[9] )
		&& ((F0_expected_prev[9] !== last_F0_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[9] = F0_expected_prev[9];
	end
	if (
		( F0_expected_prev[10] !== 1'bx ) && ( F0_prev[10] !== F0_expected_prev[10] )
		&& ((F0_expected_prev[10] !== last_F0_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[10] = F0_expected_prev[10];
	end
	if (
		( F0_expected_prev[11] !== 1'bx ) && ( F0_prev[11] !== F0_expected_prev[11] )
		&& ((F0_expected_prev[11] !== last_F0_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[11] = F0_expected_prev[11];
	end
	if (
		( F0_expected_prev[12] !== 1'bx ) && ( F0_prev[12] !== F0_expected_prev[12] )
		&& ((F0_expected_prev[12] !== last_F0_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[12] = F0_expected_prev[12];
	end
	if (
		( F0_expected_prev[13] !== 1'bx ) && ( F0_prev[13] !== F0_expected_prev[13] )
		&& ((F0_expected_prev[13] !== last_F0_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[13] = F0_expected_prev[13];
	end
	if (
		( F0_expected_prev[14] !== 1'bx ) && ( F0_prev[14] !== F0_expected_prev[14] )
		&& ((F0_expected_prev[14] !== last_F0_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[14] = F0_expected_prev[14];
	end
	if (
		( F0_expected_prev[15] !== 1'bx ) && ( F0_prev[15] !== F0_expected_prev[15] )
		&& ((F0_expected_prev[15] !== last_F0_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F0_exp[15] = F0_expected_prev[15];
	end
	if (
		( F1_expected_prev[0] !== 1'bx ) && ( F1_prev[0] !== F1_expected_prev[0] )
		&& ((F1_expected_prev[0] !== last_F1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[0] = F1_expected_prev[0];
	end
	if (
		( F1_expected_prev[1] !== 1'bx ) && ( F1_prev[1] !== F1_expected_prev[1] )
		&& ((F1_expected_prev[1] !== last_F1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[1] = F1_expected_prev[1];
	end
	if (
		( F1_expected_prev[2] !== 1'bx ) && ( F1_prev[2] !== F1_expected_prev[2] )
		&& ((F1_expected_prev[2] !== last_F1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[2] = F1_expected_prev[2];
	end
	if (
		( F1_expected_prev[3] !== 1'bx ) && ( F1_prev[3] !== F1_expected_prev[3] )
		&& ((F1_expected_prev[3] !== last_F1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[3] = F1_expected_prev[3];
	end
	if (
		( F1_expected_prev[4] !== 1'bx ) && ( F1_prev[4] !== F1_expected_prev[4] )
		&& ((F1_expected_prev[4] !== last_F1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[4] = F1_expected_prev[4];
	end
	if (
		( F1_expected_prev[5] !== 1'bx ) && ( F1_prev[5] !== F1_expected_prev[5] )
		&& ((F1_expected_prev[5] !== last_F1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[5] = F1_expected_prev[5];
	end
	if (
		( F1_expected_prev[6] !== 1'bx ) && ( F1_prev[6] !== F1_expected_prev[6] )
		&& ((F1_expected_prev[6] !== last_F1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[6] = F1_expected_prev[6];
	end
	if (
		( F1_expected_prev[7] !== 1'bx ) && ( F1_prev[7] !== F1_expected_prev[7] )
		&& ((F1_expected_prev[7] !== last_F1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[7] = F1_expected_prev[7];
	end
	if (
		( F1_expected_prev[8] !== 1'bx ) && ( F1_prev[8] !== F1_expected_prev[8] )
		&& ((F1_expected_prev[8] !== last_F1_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[8] = F1_expected_prev[8];
	end
	if (
		( F1_expected_prev[9] !== 1'bx ) && ( F1_prev[9] !== F1_expected_prev[9] )
		&& ((F1_expected_prev[9] !== last_F1_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[9] = F1_expected_prev[9];
	end
	if (
		( F1_expected_prev[10] !== 1'bx ) && ( F1_prev[10] !== F1_expected_prev[10] )
		&& ((F1_expected_prev[10] !== last_F1_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[10] = F1_expected_prev[10];
	end
	if (
		( F1_expected_prev[11] !== 1'bx ) && ( F1_prev[11] !== F1_expected_prev[11] )
		&& ((F1_expected_prev[11] !== last_F1_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[11] = F1_expected_prev[11];
	end
	if (
		( F1_expected_prev[12] !== 1'bx ) && ( F1_prev[12] !== F1_expected_prev[12] )
		&& ((F1_expected_prev[12] !== last_F1_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[12] = F1_expected_prev[12];
	end
	if (
		( F1_expected_prev[13] !== 1'bx ) && ( F1_prev[13] !== F1_expected_prev[13] )
		&& ((F1_expected_prev[13] !== last_F1_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[13] = F1_expected_prev[13];
	end
	if (
		( F1_expected_prev[14] !== 1'bx ) && ( F1_prev[14] !== F1_expected_prev[14] )
		&& ((F1_expected_prev[14] !== last_F1_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[14] = F1_expected_prev[14];
	end
	if (
		( F1_expected_prev[15] !== 1'bx ) && ( F1_prev[15] !== F1_expected_prev[15] )
		&& ((F1_expected_prev[15] !== last_F1_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp[15] = F1_expected_prev[15];
	end
	if (
		( S_expected_prev[0] !== 1'bx ) && ( S_prev[0] !== S_expected_prev[0] )
		&& ((S_expected_prev[0] !== last_S_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[0] = S_expected_prev[0];
	end
	if (
		( S_expected_prev[1] !== 1'bx ) && ( S_prev[1] !== S_expected_prev[1] )
		&& ((S_expected_prev[1] !== last_S_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[1] = S_expected_prev[1];
	end
	if (
		( S_expected_prev[2] !== 1'bx ) && ( S_prev[2] !== S_expected_prev[2] )
		&& ((S_expected_prev[2] !== last_S_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[2] = S_expected_prev[2];
	end
	if (
		( S_expected_prev[3] !== 1'bx ) && ( S_prev[3] !== S_expected_prev[3] )
		&& ((S_expected_prev[3] !== last_S_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[3] = S_expected_prev[3];
	end
	if (
		( S_expected_prev[4] !== 1'bx ) && ( S_prev[4] !== S_expected_prev[4] )
		&& ((S_expected_prev[4] !== last_S_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[4] = S_expected_prev[4];
	end
	if (
		( S_expected_prev[5] !== 1'bx ) && ( S_prev[5] !== S_expected_prev[5] )
		&& ((S_expected_prev[5] !== last_S_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[5] = S_expected_prev[5];
	end
	if (
		( S_expected_prev[6] !== 1'bx ) && ( S_prev[6] !== S_expected_prev[6] )
		&& ((S_expected_prev[6] !== last_S_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[6] = S_expected_prev[6];
	end
	if (
		( S_expected_prev[7] !== 1'bx ) && ( S_prev[7] !== S_expected_prev[7] )
		&& ((S_expected_prev[7] !== last_S_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[7] = S_expected_prev[7];
	end
	if (
		( S_expected_prev[8] !== 1'bx ) && ( S_prev[8] !== S_expected_prev[8] )
		&& ((S_expected_prev[8] !== last_S_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[8] = S_expected_prev[8];
	end
	if (
		( S_expected_prev[9] !== 1'bx ) && ( S_prev[9] !== S_expected_prev[9] )
		&& ((S_expected_prev[9] !== last_S_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[9] = S_expected_prev[9];
	end
	if (
		( S_expected_prev[10] !== 1'bx ) && ( S_prev[10] !== S_expected_prev[10] )
		&& ((S_expected_prev[10] !== last_S_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[10] = S_expected_prev[10];
	end
	if (
		( S_expected_prev[11] !== 1'bx ) && ( S_prev[11] !== S_expected_prev[11] )
		&& ((S_expected_prev[11] !== last_S_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[11] = S_expected_prev[11];
	end
	if (
		( S_expected_prev[12] !== 1'bx ) && ( S_prev[12] !== S_expected_prev[12] )
		&& ((S_expected_prev[12] !== last_S_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[12] = S_expected_prev[12];
	end
	if (
		( S_expected_prev[13] !== 1'bx ) && ( S_prev[13] !== S_expected_prev[13] )
		&& ((S_expected_prev[13] !== last_S_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[13] = S_expected_prev[13];
	end
	if (
		( S_expected_prev[14] !== 1'bx ) && ( S_prev[14] !== S_expected_prev[14] )
		&& ((S_expected_prev[14] !== last_S_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[14] = S_expected_prev[14];
	end
	if (
		( S_expected_prev[15] !== 1'bx ) && ( S_prev[15] !== S_expected_prev[15] )
		&& ((S_expected_prev[15] !== last_S_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[15] = S_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module NHAN4BIT_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] IN0;
reg [3:0] IN1;
// wires                                               
wire [15:0] F0;
wire [15:0] F1;
wire [15:0] S;

wire sampler;                             

// assign statements (if any)                          
NHAN4BIT i1 (
// port map - connection between master ports and signals/registers   
	.F0(F0),
	.F1(F1),
	.IN0(IN0),
	.IN1(IN1),
	.S(S)
);
// IN0[ 3 ]
initial
begin
	IN0[3] = 1'b1;
	IN0[3] = #450000 1'b0;
end 
// IN0[ 2 ]
initial
begin
	IN0[2] = 1'b0;
	IN0[2] = #450000 1'b1;
	IN0[2] = #170000 1'b0;
end 
// IN0[ 1 ]
initial
begin
	IN0[1] = 1'b0;
	IN0[1] = #190000 1'b1;
	IN0[1] = #430000 1'b0;
end 
// IN0[ 0 ]
initial
begin
	IN0[0] = 1'b1;
	IN0[0] = #620000 1'b0;
end 
// IN1[ 3 ]
initial
begin
	IN1[3] = 1'b1;
	IN1[3] = #190000 1'b0;
	IN1[3] = #180000 1'b1;
	IN1[3] = #150000 1'b0;
end 
// IN1[ 2 ]
initial
begin
	IN1[2] = 1'b0;
	IN1[2] = #370000 1'b1;
	IN1[2] = #150000 1'b0;
end 
// IN1[ 1 ]
initial
begin
	IN1[1] = 1'b0;
end 
// IN1[ 0 ]
initial
begin
	IN1[0] = 1'b0;
end 

NHAN4BIT_vlg_sample_tst tb_sample (
	.IN0(IN0),
	.IN1(IN1),
	.sampler_tx(sampler)
);

NHAN4BIT_vlg_check_tst tb_out(
	.F0(F0),
	.F1(F1),
	.S(S),
	.sampler_rx(sampler)
);
endmodule

