// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"

// DATE "04/17/2023 20:57:48"

// 
// Device: Altera EP2C35F672C6 Package FBGA672
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module MEALY_LBSMSSV (
	\OUTPUT ,
	CLK,
	I);
output 	\OUTPUT ;
input 	CLK;
input 	I;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \CLK~combout ;
wire \I~combout ;
wire \inst|inst5~combout ;
wire \inst2~regout ;
wire \inst|inst4~combout ;
wire \inst1~regout ;
wire \inst3~0_combout ;


cycloneii_io \CLK~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(\CLK~combout ),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(CLK));
// synopsys translate_off
defparam \CLK~I .input_async_reset = "none";
defparam \CLK~I .input_power_up = "low";
defparam \CLK~I .input_register_mode = "none";
defparam \CLK~I .input_sync_reset = "none";
defparam \CLK~I .oe_async_reset = "none";
defparam \CLK~I .oe_power_up = "low";
defparam \CLK~I .oe_register_mode = "none";
defparam \CLK~I .oe_sync_reset = "none";
defparam \CLK~I .operation_mode = "input";
defparam \CLK~I .output_async_reset = "none";
defparam \CLK~I .output_power_up = "low";
defparam \CLK~I .output_register_mode = "none";
defparam \CLK~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \I~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(\I~combout ),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(I));
// synopsys translate_off
defparam \I~I .input_async_reset = "none";
defparam \I~I .input_power_up = "low";
defparam \I~I .input_register_mode = "none";
defparam \I~I .input_sync_reset = "none";
defparam \I~I .oe_async_reset = "none";
defparam \I~I .oe_power_up = "low";
defparam \I~I .oe_register_mode = "none";
defparam \I~I .oe_sync_reset = "none";
defparam \I~I .operation_mode = "input";
defparam \I~I .output_async_reset = "none";
defparam \I~I .output_power_up = "low";
defparam \I~I .output_register_mode = "none";
defparam \I~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_lcell_comb \inst|inst5 (
// Equation(s):
// \inst|inst5~combout  = (!\I~combout ) # (!\inst1~regout )

	.dataa(vcc),
	.datab(vcc),
	.datac(\inst1~regout ),
	.datad(\I~combout ),
	.cin(gnd),
	.combout(\inst|inst5~combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst5 .lut_mask = 16'h0FFF;
defparam \inst|inst5 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff inst2(
	.clk(\CLK~combout ),
	.datain(\inst|inst5~combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst2~regout ));

cycloneii_lcell_comb \inst|inst4 (
// Equation(s):
// \inst|inst4~combout  = ((\inst1~regout  & \inst2~regout )) # (!\I~combout )

	.dataa(\inst1~regout ),
	.datab(\inst2~regout ),
	.datac(vcc),
	.datad(\I~combout ),
	.cin(gnd),
	.combout(\inst|inst4~combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst4 .lut_mask = 16'h88FF;
defparam \inst|inst4 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff inst1(
	.clk(\CLK~combout ),
	.datain(\inst|inst4~combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst1~regout ));

cycloneii_lcell_comb \inst3~0 (
// Equation(s):
// \inst3~0_combout  = (!\inst1~regout  & (!\I~combout  & !\inst2~regout ))

	.dataa(vcc),
	.datab(\inst1~regout ),
	.datac(\I~combout ),
	.datad(\inst2~regout ),
	.cin(gnd),
	.combout(\inst3~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst3~0 .lut_mask = 16'h0003;
defparam \inst3~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_io \OUTPUT~I (
	.datain(\inst3~0_combout ),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(\OUTPUT ));
// synopsys translate_off
defparam \OUTPUT~I .input_async_reset = "none";
defparam \OUTPUT~I .input_power_up = "low";
defparam \OUTPUT~I .input_register_mode = "none";
defparam \OUTPUT~I .input_sync_reset = "none";
defparam \OUTPUT~I .oe_async_reset = "none";
defparam \OUTPUT~I .oe_power_up = "low";
defparam \OUTPUT~I .oe_register_mode = "none";
defparam \OUTPUT~I .oe_sync_reset = "none";
defparam \OUTPUT~I .operation_mode = "output";
defparam \OUTPUT~I .output_async_reset = "none";
defparam \OUTPUT~I .output_power_up = "low";
defparam \OUTPUT~I .output_register_mode = "none";
defparam \OUTPUT~I .output_sync_reset = "none";
// synopsys translate_on

endmodule
